# Generated by Django 3.2.2 on 2022-05-09 10:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import thread.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                                           primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='media/attachement/', validators=[
                 thread.validators.file_size_validator, thread.validators.file_type_validator])),
                ('type', models.CharField(blank=True, max_length=200, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('date_created', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                                           primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='')),
                ('date_created', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                                           primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='PlayList',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                                           primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default='', max_length=120)),
                ('cover_image', models.ImageField(null=True, upload_to='')),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('active_hours', models.IntegerField(default=24)),
                ('views', models.BigIntegerField(default=0)),
                ('short_description', models.TextField(default='')),
            ],
            options={
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='PlayListCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                                           primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, default='', max_length=120)),
                ('date_created', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.AddConstraint(
            model_name='playlistcategory',
            constraint=models.UniqueConstraint(
                fields=('title',), name='title must be unqiue'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='categories',
            field=models.ManyToManyField(
                blank=True, to='thread.PlayListCategory'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='created_by',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='playlist',
            name='songs',
            field=models.ManyToManyField(to='thread.Attachment'),
        ),
        migrations.AddField(
            model_name='like',
            name='comment',
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='thread.comment'),
        ),
        migrations.AddField(
            model_name='like',
            name='created_by',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='like',
            name='playlist',
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='thread.playlist'),
        ),
        migrations.AddField(
            model_name='comment',
            name='attachment',
            field=models.ManyToManyField(to='thread.Attachment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='created_by',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='playlist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='comments', to='thread.playlist'),
        ),
        migrations.AddField(
            model_name='comment',
            name='replying',
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='thread.comment'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='created_by',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='playlist',
            constraint=models.UniqueConstraint(
                fields=('name', 'created_by'), name='name must be unqiue'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('comment__isnull', True), ('playlist__isnull', False)), models.Q(
                ('comment__isnull', False), ('playlist__isnull', True)), _connector='OR')), name='Like must have either comment or playlist'),
        ),
    ]
